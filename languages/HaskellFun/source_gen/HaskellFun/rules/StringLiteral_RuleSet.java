package HaskellFun.rules;

/*Generated by MPS */

import org.modelingvalue.dclare.mps.IRuleSet;
import org.modelingvalue.dclare.mps.DAttribute;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.function.Supplier;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.modelingvalue.dclare.mps.DRule;
import java.util.ArrayList;
import DclareMPSRuntime.util.DclareUtil;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.modelingvalue.dclare.mps.DNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.model.SModel;
import org.modelingvalue.dclare.mps.DModule;
import org.modelingvalue.dclare.mps.DRepository;
import org.modelingvalue.dclare.mps.SClassObject;
import org.modelingvalue.dclare.mps.SClass;

public class StringLiteral_RuleSet implements IRuleSet {


  public static final DAttribute<SNode, List<SNode>> STRINGTYPE_0 = DAttribute.of("6695265278857611380", "STRINGTYPE_0", true, true, false, -1, new Supplier<SNode>() {
    public SNode get() {
      return SNodeOperations.getNode("r:ab5919cc-ecf8-4597-a89d-d337fdd6e7ff(HaskellFun.rules)", "6695265278857339071");
    }
  }, null);

  private static final DRule<SNode> STRINGLITERAL_RULESET_0 = new DRule<SNode>() {
    public void run(SNode context) {
      StringLiteral_RuleSet_0(context);
    }

    @Override
    public SNode getSource() {
      return SNodeOperations.getNode("r:ab5919cc-ecf8-4597-a89d-d337fdd6e7ff(HaskellFun.rules)", "6695265278857338385");
    }
    @Override
    public boolean isSynthetic() {
      return false;
    }

    @Override
    public String toString() {
      return "StringLiteral_RuleSet_0";
    }
  };

  private static void StringLiteral_RuleSet_0(final SNode context) {
    {
      final List<SNode> stringtype_0 = new ArrayList<SNode>(1);
      final List<SNode> pre_0 = DclareUtil.toNodeList(DclareUtil.pre(new _FunctionTypes._return_P0_E0<Object>() {
        public Object invoke() {
          return ((Object) DclareUtil.<SNode,SNode>getAttributeValue("6695265278857338346", "type", false, false, false, -1, null, null, context));
        }
      }));
      
      DclareUtil.<SNode>setAttributeValue("6695265278857338346", "type", false, false, false, null, context, DclareUtil.dNode(pre_0, DclareUtil.<SNode,List<SNode>>getAttributeValue("6695265278857611380", "STRINGTYPE_0", true, true, false, -1, null, null, context), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47da71ecL, "jetbrains.mps.baseLanguage.structure.StringType"), new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          return DNode.wrap(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47da71ecL, "jetbrains.mps.baseLanguage.structure.StringType")));
        }
      }, stringtype_0));
;
      
      DclareUtil.<List<SNode>>setAttributeValue("6695265278857611380", "STRINGTYPE_0", true, true, false, null, context, (ListSequence.fromList(stringtype_0).isNotEmpty() ? stringtype_0 : null));;
    }
  }

  public StringLiteral_RuleSet() {
  }

  @Override
  public List<DRule<SNode>> getNodeRules(SAbstractConcept concept) {
    List<DRule<SNode>> rules = new ArrayList<DRule<SNode>>();
    if (concept.isSubConceptOf(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, "jetbrains.mps.baseLanguage.structure.StringLiteral"))) {
      rules.add((DRule) STRINGLITERAL_RULESET_0);
    }
    return rules;
  }

  @Override
  public List<DRule<SModel>> getModelRules() {
    List<DRule<SModel>> rules = new ArrayList<DRule<SModel>>();
    return rules;
  }

  @Override
  public List<DRule<DModule>> getModuleRules() {
    List<DRule<DModule>> rules = new ArrayList<DRule<DModule>>();
    return rules;
  }

  @Override
  public List<DRule<DRepository>> getRepositoryRules() {
    List<DRule<DRepository>> rules = new ArrayList<DRule<DRepository>>();
    return rules;
  }

  @Override
  public List<DAttribute<SNode, ?>> getNodeAttributes(SAbstractConcept concept) {
    List<DAttribute<SNode, ?>> attrs = new ArrayList<DAttribute<SNode, ?>>();
    if (concept.isSubConceptOf(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, "jetbrains.mps.baseLanguage.structure.StringLiteral"))) {
      attrs.add((DAttribute) STRINGTYPE_0);
    }
    return attrs;
  }

  @Override
  public List<DAttribute<SModel, ?>> getModelAttributes() {
    List<DAttribute<SModel, ?>> attrs = new ArrayList<DAttribute<SModel, ?>>();
    return attrs;
  }

  @Override
  public List<DAttribute<DModule, ?>> getModuleAttributes() {
    List<DAttribute<DModule, ?>> attrs = new ArrayList<DAttribute<DModule, ?>>();
    return attrs;
  }

  @Override
  public List<DAttribute<DRepository, ?>> getRepositoryAttributes() {
    List<DAttribute<DRepository, ?>> attrs = new ArrayList<DAttribute<DRepository, ?>>();
    return attrs;
  }

  @Override
  public List<DAttribute<SClassObject, ?>> getClassAttributes(SClass aClass) {
    List<DAttribute<SClassObject, ?>> attrs = new ArrayList<DAttribute<SClassObject, ?>>();
    return attrs;
  }

  @Override
  public List<DRule<SClassObject>> getClassRules(SClass aClass) {
    List<DRule<SClassObject>> rules = new ArrayList<DRule<SClassObject>>();
    return rules;
  }

}
