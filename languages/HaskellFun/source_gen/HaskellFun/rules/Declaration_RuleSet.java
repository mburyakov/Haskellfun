package HaskellFun.rules;

/*Generated by MPS */

import org.modelingvalue.dclare.mps.IRuleSet;
import org.modelingvalue.dclare.mps.DRule;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import DclareMPSRuntime.util.DclareUtil;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SModel;
import org.modelingvalue.dclare.mps.DModule;
import org.modelingvalue.dclare.mps.DRepository;
import org.modelingvalue.dclare.mps.DAttribute;
import org.modelingvalue.dclare.mps.SClassObject;
import org.modelingvalue.dclare.mps.SClass;

public class Declaration_RuleSet implements IRuleSet {



  private static final DRule<SNode> DECLARATION_RULESET_0 = new DRule<SNode>() {
    public void run(SNode context) {
      Declaration_RuleSet_0(context);
    }

    @Override
    public SNode getSource() {
      return SNodeOperations.getNode("r:ab5919cc-ecf8-4597-a89d-d337fdd6e7ff(HaskellFun.rules)", "6695265278857406928");
    }
    @Override
    public boolean isSynthetic() {
      return false;
    }

    @Override
    public String toString() {
      return "Declaration_RuleSet_0";
    }
  };

  private static void Declaration_RuleSet_0(SNode context) {
    
    DclareUtil.setFeatureValue(context, MetaAdapterFactory.getContainmentLink(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627822167L, 0x5cea5c4c4f4d69a4L, "type"), DclareUtil.<SNode,SNode>getAttributeValue("6695265278857338346", "type", false, false, false, -1, null, null, SLinkOperations.getTarget(context, MetaAdapterFactory.getContainmentLink(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627822167L, 0x325044962782d955L, "value"))));;
  }

  public Declaration_RuleSet() {
  }

  @Override
  public List<DRule<SNode>> getNodeRules(SAbstractConcept concept) {
    List<DRule<SNode>> rules = new ArrayList<DRule<SNode>>();
    if (concept.isSubConceptOf(MetaAdapterFactory.getConcept(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627822167L, "HaskellFun.structure.Declaration"))) {
      rules.add((DRule) DECLARATION_RULESET_0);
    }
    return rules;
  }

  @Override
  public List<DRule<SModel>> getModelRules() {
    List<DRule<SModel>> rules = new ArrayList<DRule<SModel>>();
    return rules;
  }

  @Override
  public List<DRule<DModule>> getModuleRules() {
    List<DRule<DModule>> rules = new ArrayList<DRule<DModule>>();
    return rules;
  }

  @Override
  public List<DRule<DRepository>> getRepositoryRules() {
    List<DRule<DRepository>> rules = new ArrayList<DRule<DRepository>>();
    return rules;
  }

  @Override
  public List<DAttribute<SNode, ?>> getNodeAttributes(SAbstractConcept concept) {
    List<DAttribute<SNode, ?>> attrs = new ArrayList<DAttribute<SNode, ?>>();
    return attrs;
  }

  @Override
  public List<DAttribute<SModel, ?>> getModelAttributes() {
    List<DAttribute<SModel, ?>> attrs = new ArrayList<DAttribute<SModel, ?>>();
    return attrs;
  }

  @Override
  public List<DAttribute<DModule, ?>> getModuleAttributes() {
    List<DAttribute<DModule, ?>> attrs = new ArrayList<DAttribute<DModule, ?>>();
    return attrs;
  }

  @Override
  public List<DAttribute<DRepository, ?>> getRepositoryAttributes() {
    List<DAttribute<DRepository, ?>> attrs = new ArrayList<DAttribute<DRepository, ?>>();
    return attrs;
  }

  @Override
  public List<DAttribute<SClassObject, ?>> getClassAttributes(SClass aClass) {
    List<DAttribute<SClassObject, ?>> attrs = new ArrayList<DAttribute<SClassObject, ?>>();
    return attrs;
  }

  @Override
  public List<DRule<SClassObject>> getClassRules(SClass aClass) {
    List<DRule<SClassObject>> rules = new ArrayList<DRule<SClassObject>>();
    return rules;
  }

}
