package HaskellFun.rules;

/*Generated by MPS */

import org.modelingvalue.dclare.mps.IRuleSet;
import org.modelingvalue.dclare.mps.DAttribute;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.function.Supplier;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import org.modelingvalue.dclare.mps.DRule;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SModel;
import org.modelingvalue.dclare.mps.DModule;
import org.modelingvalue.dclare.mps.DRepository;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.modelingvalue.dclare.mps.SClassObject;
import org.modelingvalue.dclare.mps.SClass;

public class Expression_RuleSet implements IRuleSet {


  public static final DAttribute<SNode, SNode> TYPE = DAttribute.of("6695265278857338346", "type", false, false, false, -1, new Supplier<SNode>() {
    public SNode get() {
      return SNodeOperations.getNode("r:ab5919cc-ecf8-4597-a89d-d337fdd6e7ff(HaskellFun.rules)", "6695265278857338346");
    }
  }, null);



  public Expression_RuleSet() {
  }

  @Override
  public List<DRule<SNode>> getNodeRules(SAbstractConcept concept) {
    List<DRule<SNode>> rules = new ArrayList<DRule<SNode>>();
    return rules;
  }

  @Override
  public List<DRule<SModel>> getModelRules() {
    List<DRule<SModel>> rules = new ArrayList<DRule<SModel>>();
    return rules;
  }

  @Override
  public List<DRule<DModule>> getModuleRules() {
    List<DRule<DModule>> rules = new ArrayList<DRule<DModule>>();
    return rules;
  }

  @Override
  public List<DRule<DRepository>> getRepositoryRules() {
    List<DRule<DRepository>> rules = new ArrayList<DRule<DRepository>>();
    return rules;
  }

  @Override
  public List<DAttribute<SNode, ?>> getNodeAttributes(SAbstractConcept concept) {
    List<DAttribute<SNode, ?>> attrs = new ArrayList<DAttribute<SNode, ?>>();
    if (concept.isSubConceptOf(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL, "jetbrains.mps.baseLanguage.structure.Expression"))) {
      attrs.add((DAttribute) TYPE);
    }
    return attrs;
  }

  @Override
  public List<DAttribute<SModel, ?>> getModelAttributes() {
    List<DAttribute<SModel, ?>> attrs = new ArrayList<DAttribute<SModel, ?>>();
    return attrs;
  }

  @Override
  public List<DAttribute<DModule, ?>> getModuleAttributes() {
    List<DAttribute<DModule, ?>> attrs = new ArrayList<DAttribute<DModule, ?>>();
    return attrs;
  }

  @Override
  public List<DAttribute<DRepository, ?>> getRepositoryAttributes() {
    List<DAttribute<DRepository, ?>> attrs = new ArrayList<DAttribute<DRepository, ?>>();
    return attrs;
  }

  @Override
  public List<DAttribute<SClassObject, ?>> getClassAttributes(SClass aClass) {
    List<DAttribute<SClassObject, ?>> attrs = new ArrayList<DAttribute<SClassObject, ?>>();
    return attrs;
  }

  @Override
  public List<DRule<SClassObject>> getClassRules(SClass aClass) {
    List<DRule<SClassObject>> rules = new ArrayList<DRule<SClassObject>>();
    return rules;
  }

}
