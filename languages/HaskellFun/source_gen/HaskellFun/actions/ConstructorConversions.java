package HaskellFun.actions;

/*Generated by MPS */

import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class ConstructorConversions {
  public static class NodeFactory_654027536478002842 implements NodeFactory {
    public void setup(final SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
      {
        final SNode original = sampleNode;
        if (SNodeOperations.isInstanceOf(original, MetaAdapterFactory.getConcept(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944908132cL, "HaskellFun.structure.Constructor"))) {
          SPropertyOperations.set(newNode, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(original, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
          ListSequence.fromList(SLinkOperations.getChildren(original, MetaAdapterFactory.getContainmentLink(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944908132cL, 0x9139294490fb747L, "types"))).visitAll(new IVisitor<SNode>() {
            public void visit(SNode originalType) {
              SNode entry = SNodeFactoryOperations.addNewChild(newNode, MetaAdapterFactory.getContainmentLink(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x9139294490fb71dL, 0x91392944917a57eL, "entries"), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944917a32bL, "HaskellFun.structure.RecordEntry")));
              SLinkOperations.setTarget(entry, MetaAdapterFactory.getContainmentLink(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944917a32bL, 0x91392944917a343L, "type"), originalType);
            }
          });
        }
      }
    }
  }
  public static class NodeFactory_654027536478070463 implements NodeFactory {
    public void setup(final SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
      {
        final SNode original = sampleNode;
        if (SNodeOperations.isInstanceOf(original, MetaAdapterFactory.getConcept(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x9139294490fb71dL, "HaskellFun.structure.ConstructorRecord"))) {
          SPropertyOperations.set(newNode, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(original, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
          ListSequence.fromList(SLinkOperations.getChildren(original, MetaAdapterFactory.getContainmentLink(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x9139294490fb71dL, 0x91392944917a57eL, "entries"))).visitAll(new IVisitor<SNode>() {
            public void visit(SNode originalEntry) {
              ListSequence.fromList(SLinkOperations.getChildren(newNode, MetaAdapterFactory.getContainmentLink(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944908132cL, 0x9139294490fb747L, "types"))).addElement(SLinkOperations.getTarget(originalEntry, MetaAdapterFactory.getContainmentLink(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944917a32bL, 0x91392944917a343L, "type")));
            }
          });
        }
      }
    }
  }
}
