package HaskellFun.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractConstructor = createDescriptorForAbstractConstructor();
  /*package*/ final ConceptDescriptor myConceptAlgebraicDataType = createDescriptorForAlgebraicDataType();
  /*package*/ final ConceptDescriptor myConceptConstructor = createDescriptorForConstructor();
  /*package*/ final ConceptDescriptor myConceptConstructorRecord = createDescriptorForConstructorRecord();
  /*package*/ final ConceptDescriptor myConceptDataType = createDescriptorForDataType();
  /*package*/ final ConceptDescriptor myConceptDeclaration = createDescriptorForDeclaration();
  /*package*/ final ConceptDescriptor myConceptDeclarationParameter = createDescriptorForDeclarationParameter();
  /*package*/ final ConceptDescriptor myConceptDeclarationReference = createDescriptorForDeclarationReference();
  /*package*/ final ConceptDescriptor myConceptDoExpression = createDescriptorForDoExpression();
  /*package*/ final ConceptDescriptor myConceptEmptyLine = createDescriptorForEmptyLine();
  /*package*/ final ConceptDescriptor myConceptForm = createDescriptorForForm();
  /*package*/ final ConceptDescriptor myConceptHaskellExpression = createDescriptorForHaskellExpression();
  /*package*/ final ConceptDescriptor myConceptHaskellModule = createDescriptorForHaskellModule();
  /*package*/ final ConceptDescriptor myConceptImport = createDescriptorForImport();
  /*package*/ final ConceptDescriptor myConceptPrintln = createDescriptorForPrintln();
  /*package*/ final ConceptDescriptor myConceptRecordEntry = createDescriptorForRecordEntry();
  /*package*/ final ConceptDescriptor myConceptTypeVariable = createDescriptorForTypeVariable();
  private final LanguageConceptSwitch myConceptIndex;

  public StructureAspectDescriptor() {
    myConceptIndex = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractConstructor, myConceptAlgebraicDataType, myConceptConstructor, myConceptConstructorRecord, myConceptDataType, myConceptDeclaration, myConceptDeclarationParameter, myConceptDeclarationReference, myConceptDoExpression, myConceptEmptyLine, myConceptForm, myConceptHaskellExpression, myConceptHaskellModule, myConceptImport, myConceptPrintln, myConceptRecordEntry, myConceptTypeVariable);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myConceptIndex.index(id)) {
      case LanguageConceptSwitch.AbstractConstructor:
        return myConceptAbstractConstructor;
      case LanguageConceptSwitch.AlgebraicDataType:
        return myConceptAlgebraicDataType;
      case LanguageConceptSwitch.Constructor:
        return myConceptConstructor;
      case LanguageConceptSwitch.ConstructorRecord:
        return myConceptConstructorRecord;
      case LanguageConceptSwitch.DataType:
        return myConceptDataType;
      case LanguageConceptSwitch.Declaration:
        return myConceptDeclaration;
      case LanguageConceptSwitch.DeclarationParameter:
        return myConceptDeclarationParameter;
      case LanguageConceptSwitch.DeclarationReference:
        return myConceptDeclarationReference;
      case LanguageConceptSwitch.DoExpression:
        return myConceptDoExpression;
      case LanguageConceptSwitch.EmptyLine:
        return myConceptEmptyLine;
      case LanguageConceptSwitch.Form:
        return myConceptForm;
      case LanguageConceptSwitch.HaskellExpression:
        return myConceptHaskellExpression;
      case LanguageConceptSwitch.HaskellModule:
        return myConceptHaskellModule;
      case LanguageConceptSwitch.Import:
        return myConceptImport;
      case LanguageConceptSwitch.Println:
        return myConceptPrintln;
      case LanguageConceptSwitch.RecordEntry:
        return myConceptRecordEntry;
      case LanguageConceptSwitch.TypeVariable:
        return myConceptTypeVariable;
      default:
        return null;
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myConceptIndex.index(c);
  }

  private static ConceptDescriptor createDescriptorForAbstractConstructor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "AbstractConstructor", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944917a311L);
    b.class_(false, true, false);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL);
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/654027536477954833");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAlgebraicDataType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "AlgebraicDataType", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944907b44dL);
    b.class_(false, false, false);
    b.super_("HaskellFun.structure.Form", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627818aecL);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL);
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/654027536476910669");
    b.prop("isAbstract", 0x9139294490d107aL, "654027536477261946");
    b.aggregate("typeVars", 0x913929449081352L).target(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x913929449081356L).optional(true).ordered(true).multiple(true).origin("654027536476934994").done();
    b.aggregate("constructore", 0x91392944908132fL).target(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944917a311L).optional(false).ordered(true).multiple(true).origin("654027536476934959").done();
    b.aggregate("declarations", 0x91392944908134fL).target(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627822167L).optional(true).ordered(true).multiple(true).origin("654027536476934991").done();
    b.alias("data");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstructor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "Constructor", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944908132cL);
    b.class_(false, false, false);
    b.super_("HaskellFun.structure.AbstractConstructor", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944917a311L);
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/654027536476934956");
    b.aggregate("types", 0x9139294490fb747L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL).optional(true).ordered(true).multiple(true).origin("654027536477435719").done();
    b.alias("constructor");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstructorRecord() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "ConstructorRecord", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x9139294490fb71dL);
    b.class_(false, false, false);
    b.super_("HaskellFun.structure.AbstractConstructor", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944917a311L);
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/654027536477435677");
    b.aggregate("entries", 0x91392944917a57eL).target(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944917a32bL).optional(true).ordered(true).multiple(true).origin("654027536477955454").done();
    b.alias("constructor with record syntax");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDataType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "DataType", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x9139294492326ddL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Type", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL);
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/654027536478709469");
    b.associate("algebraicDataType", 0x913929449232708L).target(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944907b44dL).optional(false).origin("654027536478709512").done();
    b.aggregate("typeParameters", 0x913929449238f52L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL).optional(true).ordered(true).multiple(true).origin("654027536478736210").done();
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "Declaration", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627822167L);
    b.class_(false, false, false);
    b.super_("HaskellFun.structure.Form", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627818aecL);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL);
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/3625473111731872103");
    b.aggregate("parameters", 0x32504496278a6159L).target(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x32504496278a5a5dL).optional(true).ordered(true).multiple(true).origin("3625473111732412761").done();
    b.aggregate("value", 0x325044962782d955L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("3625473111731919189").done();
    b.alias("definition");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDeclarationParameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "DeclarationParameter", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x32504496278a5a5dL);
    b.class_(false, false, false);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL);
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/3625473111732410973");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDeclarationReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "DeclarationReference", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x32504496278a39b2L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.parent(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x32504496278a38b1L);
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/3625473111732402610");
    b.associate("definition", 0x32504496278a39b5L).target(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627822167L).optional(false).origin("3625473111732402613").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDoExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "DoExpression", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x325044962789d32fL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.parent(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x32504496278a38b1L);
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/3625473111732376367");
    b.aggregate("expressions", 0x32504496278a3909L).target(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x32504496278a38b1L).optional(true).ordered(true).multiple(true).origin("3625473111732402441").done();
    b.alias("do");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmptyLine() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "EmptyLine", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627818af2L);
    b.class_(false, false, false);
    b.super_("HaskellFun.structure.Form", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627818aecL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/3625473111731833586");
    b.alias("<empty>");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForForm() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "Form", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627818aecL);
    b.class_(false, true, false);
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/3625473111731833580");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForHaskellExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "HaskellExpression", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x32504496278a38b1L);
    b.interface_();
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/3625473111732402353");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForHaskellModule() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "HaskellModule", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x325044962780d7d2L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/3625473111731787730");
    b.aggregate("body", 0x3250449627822108L).target(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627818aecL).optional(true).ordered(true).multiple(true).origin("3625473111731872008").done();
    b.alias("module");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForImport() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "Import", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x289a4b96eaa010f5L);
    b.class_(false, false, false);
    b.super_("HaskellFun.structure.Form", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627818aecL);
    b.parent(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x32504496278a38b1L);
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/2925734019484094709");
    b.associate("module", 0x289a4b96eaa01528L).target(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x325044962780d7d2L).optional(false).origin("2925734019484095784").done();
    b.alias("import");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPrintln() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "Println", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x32504496278a3959L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.parent(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x32504496278a38b1L);
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/3625473111732402521");
    b.aggregate("message", 0x32504496278a396bL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("3625473111732402539").done();
    b.alias("println");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRecordEntry() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "RecordEntry", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944917a32bL);
    b.class_(false, false, false);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL);
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/654027536477954859");
    b.aggregate("type", 0x91392944917a343L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL).optional(false).ordered(true).multiple(false).origin("654027536477954883").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTypeVariable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HaskellFun", "TypeVariable", 0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x913929449081356L);
    b.class_(false, false, false);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL);
    b.origin("r:abc540d4-3f70-4969-8e52-358d4ba9345e(HaskellFun.structure)/654027536476934998");
    b.alias("type variable");
    return b.create();
  }
}
