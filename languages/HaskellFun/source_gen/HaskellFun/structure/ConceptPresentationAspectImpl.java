package HaskellFun.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractConstructor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AlgebraicDataType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Constructor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstructorRecord = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DataType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Declaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DeclarationParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DeclarationReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DoExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmptyLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Form = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HaskellExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HaskellModule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Import = new ConceptPresentationBuilder().shortDesc("import a module or selected functions").create();
  private final ConceptPresentation props_Println = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RecordEntry = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeVariable = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractConstructor:
        return props_AbstractConstructor;
      case LanguageConceptSwitch.AlgebraicDataType:
        return props_AlgebraicDataType;
      case LanguageConceptSwitch.Constructor:
        return props_Constructor;
      case LanguageConceptSwitch.ConstructorRecord:
        return props_ConstructorRecord;
      case LanguageConceptSwitch.DataType:
        return props_DataType;
      case LanguageConceptSwitch.Declaration:
        return props_Declaration;
      case LanguageConceptSwitch.DeclarationParameter:
        return props_DeclarationParameter;
      case LanguageConceptSwitch.DeclarationReference:
        return props_DeclarationReference;
      case LanguageConceptSwitch.DoExpression:
        return props_DoExpression;
      case LanguageConceptSwitch.EmptyLine:
        return props_EmptyLine;
      case LanguageConceptSwitch.Form:
        return props_Form;
      case LanguageConceptSwitch.HaskellExpression:
        return props_HaskellExpression;
      case LanguageConceptSwitch.HaskellModule:
        return props_HaskellModule;
      case LanguageConceptSwitch.Import:
        return props_Import;
      case LanguageConceptSwitch.Println:
        return props_Println;
      case LanguageConceptSwitch.RecordEntry:
        return props_RecordEntry;
      case LanguageConceptSwitch.TypeVariable:
        return props_TypeVariable;
    }
    return null;
  }
}
