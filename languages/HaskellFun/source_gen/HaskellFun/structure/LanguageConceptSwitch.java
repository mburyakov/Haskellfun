package HaskellFun.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractConstructor = 0;
  public static final int AlgebraicDataType = 1;
  public static final int Constructor = 2;
  public static final int ConstructorRecord = 3;
  public static final int DataType = 4;
  public static final int Declaration = 5;
  public static final int DeclarationParameter = 6;
  public static final int DeclarationReference = 7;
  public static final int DoExpression = 8;
  public static final int EmptyLine = 9;
  public static final int Form = 10;
  public static final int HaskellExpression = 11;
  public static final int HaskellModule = 12;
  public static final int Import = 13;
  public static final int Println = 14;
  public static final int RecordEntry = 15;
  public static final int TypeVariable = 16;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x70eb8650b1874f45L, 0x995803d27f5d94baL);
    builder.put(0x91392944917a311L, AbstractConstructor);
    builder.put(0x91392944907b44dL, AlgebraicDataType);
    builder.put(0x91392944908132cL, Constructor);
    builder.put(0x9139294490fb71dL, ConstructorRecord);
    builder.put(0x9139294492326ddL, DataType);
    builder.put(0x3250449627822167L, Declaration);
    builder.put(0x32504496278a5a5dL, DeclarationParameter);
    builder.put(0x32504496278a39b2L, DeclarationReference);
    builder.put(0x325044962789d32fL, DoExpression);
    builder.put(0x3250449627818af2L, EmptyLine);
    builder.put(0x3250449627818aecL, Form);
    builder.put(0x32504496278a38b1L, HaskellExpression);
    builder.put(0x325044962780d7d2L, HaskellModule);
    builder.put(0x289a4b96eaa010f5L, Import);
    builder.put(0x32504496278a3959L, Println);
    builder.put(0x91392944917a32bL, RecordEntry);
    builder.put(0x913929449081356L, TypeVariable);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
