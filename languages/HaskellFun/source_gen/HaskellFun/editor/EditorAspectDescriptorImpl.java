package HaskellFun.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.NamedMenuId;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AlgebraicDataType_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Constructor_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new ConstructorRecord_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new DataType_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Declaration_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new DeclarationParameter_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new DeclarationReference_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new DoExpression_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new EmptyLine_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new HaskellModule_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Import_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Println_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new RecordEntry_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new TypeVariable_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<TransformationMenu>singletonList(new AlgebraicDataType_TransformationMenu());
      case 1:
        return Collections.<TransformationMenu>singletonList(new Constructor_TransformationMenu());
      case 2:
        return Collections.<TransformationMenu>singletonList(new Declaration_TransformationMenu());
      case 3:
        return Collections.<TransformationMenu>singletonList(new DeclarationParameter_TransformationMenu());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredNamedTransformationMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0a1a4, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new AlgebraicDataTypeDeclarations_ext_1()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new AlgebraicDataType_ApplySideTransforms()});
            case 2:
              return Arrays.asList(new TransformationMenu[]{new AlgebraicDataType_ApplySideTransforms_1()});
            default:
          }
        }
        break;
      case 1:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0b1a4, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new Constructor_ApplySideTransforms()});
            default:
          }
        }
        break;
      case 2:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0c1a4, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new Declaration_ApplySideTransforms()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex3.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new DataType_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new DeclarationReference_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new EmptyLine_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944907b44dL), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944908132cL), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x9139294490fb71dL), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x9139294492326ddL), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627822167L), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x32504496278a5a5dL), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x32504496278a39b2L), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x325044962789d32fL), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627818af2L), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x325044962780d7d2L), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x289a4b96eaa010f5L), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x32504496278a3959L), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944917a32bL), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x913929449081356L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944907b44dL), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944908132cL), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627822167L), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x32504496278a5a5dL)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944907b44dL), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x91392944908132cL), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627822167L)).seal();
  private static final ConceptSwitchIndex conceptIndex3 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x9139294492326ddL), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x32504496278a39b2L), MetaIdFactory.conceptId(0x70eb8650b1874f45L, 0x995803d27f5d94baL, 0x3250449627818af2L)).seal();
  private static String[] stringSwitchCases_xbvbvu_a0a0a0a1a4 = new String[]{"HaskellFun.editor.AlgebraicDataTypeDeclarations_ext_1", "HaskellFun.editor.AlgebraicDataType_ApplySideTransforms", "HaskellFun.editor.AlgebraicDataType_ApplySideTransforms_1"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0b1a4 = new String[]{"HaskellFun.editor.Constructor_ApplySideTransforms"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0c1a4 = new String[]{"HaskellFun.editor.Declaration_ApplySideTransforms"};
}
